resource "aws_wafv2_web_acl" "waf" {
  name        = "example-web-acl"
  description = "Web ACL for CloudFront"
  scope       = "CLOUDFRONT"

  custom_response_body {
    key          = "default_block_response"
    content      = "WAF(433): You are not allowed to access this resource."
    content_type = "TEXT_PLAIN"
  }

  default_action {
    block {
      custom_response {
        custom_response_body_key = "default_block_response"
        response_code            = 403
      }
    }
  }


  #  default_action {
  #    allow {}
  #  }

  rule {
    name     = "IPWhitelistRule"
    priority = 1
    action {
      allow {}
    }
    statement {
      ip_set_reference_statement {
        arn = aws_wafv2_ip_set.ip_set.arn
      }
    }
    visibility_config {
      sampled_requests_enabled   = true
      cloudwatch_metrics_enabled = true
      metric_name                = "IPWhitelistRule"
    }
  }

  visibility_config {
    sampled_requests_enabled   = true
    cloudwatch_metrics_enabled = true
    metric_name                = "WebACL"
  }

  rule {
    name     = "GeoRestrictionRule"
    priority = 2
    action {
      block {}
    }
    statement {
      geo_match_statement {
        country_codes = ["US", "GB"]
      }
    }
    visibility_config {
      cloudwatch_metrics_enabled = true
      metric_name                = "GeoRestriction"
      sampled_requests_enabled   = true
    }
  }

  rule {
    name     = "AWS-AWSManagedRulesAdminProtectionRuleSet"
    priority = 3
    override_action {
      none {}
    }
    statement {
      managed_rule_group_statement {
        name        = "AWSManagedRulesAdminProtectionRuleSet"
        vendor_name = "AWS"
      }
    }
    visibility_config {
      cloudwatch_metrics_enabled = true
      metric_name                = "AdminProtection"
      sampled_requests_enabled   = true
    }
  }

  rule {
    name     = "AWS-AWSManagedRulesBotControlRuleSet"
    priority = 4
    override_action {
      none {}
    }
    statement {
      managed_rule_group_statement {
        name        = "AWSManagedRulesBotControlRuleSet"
        vendor_name = "AWS"
      }
    }
    visibility_config {
      cloudwatch_metrics_enabled = true
      metric_name                = "BotControl"
      sampled_requests_enabled   = true
    }
  }

  rule {
    name     = "AWS-AWSManagedRulesKnownBadInputsRuleSet"
    priority = 5
    override_action {
      none {}
    }
    statement {
      managed_rule_group_statement {
        name        = "AWSManagedRulesKnownBadInputsRuleSet"
        vendor_name = "AWS"
      }
    }
    visibility_config {
      cloudwatch_metrics_enabled = true
      metric_name                = "KnownBadInputs"
      sampled_requests_enabled   = true
    }
  }

  rule {
    name     = "AWS-AWSManagedRulesAmazonIpReputationList"
    priority = 6
    override_action {
      none {}
    }
    statement {
      managed_rule_group_statement {
        name        = "AWSManagedRulesAmazonIpReputationList"
        vendor_name = "AWS"
      }
    }
    visibility_config {
      cloudwatch_metrics_enabled = true
      metric_name                = "AmazonIpReputation"
      sampled_requests_enabled   = true
    }
  }

  #  visibility_config {
  #    cloudwatch_metrics_enabled = true
  #    metric_name                = "geoRestrictionAcl"
  #    sampled_requests_enabled   = true
  #   }

}

resource "aws_wafv2_ip_set" "ip_set" {
  name        = "static-web-ip-set"
  description = "IP Set for WAF, Do not Modify, Generated by Terraform"
  scope       = "CLOUDFRONT"

  ip_address_version = "IPV4"
  addresses          = ["203.0.113.0/24"]
}
